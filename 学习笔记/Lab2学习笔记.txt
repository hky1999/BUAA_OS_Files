一、MMU (Memory Management Unit) 内存管理单元
	硬件设备，把逻辑地址映射为物理地址
二、TLB （Translation Lookside Buffer) 后援存储器、相联存储器(Associative Memory) 快表
	安装在MMU内部，硬件设备
	能让计算机能够不经过页表就把虚拟地址映射成物理地址的硬件设备。
	页表的高速缓存
	每个TLB的条目中包含有一个页面的所有信息（有效位、虚页号、物理页号、修改位、保护位等等）
	内容与页表中相同页面的条目中的内容完全一致
	若TLB命中，只需要两次访存（1次TLB+1次内存）就可以得到需要的数据
三、内存访问
	1.CPU给出虚拟地址来访问数据，TLB接受到这个地址之后查找是否有对应的页表项
	2.假设页表项存在，则根据物理地址在cache中查询，如果不存在，则MMU执行正常的页表查询工作之后再根据物理地址在cache中查询，同时更新TLB中的内容
	3.如果cache命中，则直接返回给CPU数据；如果没有命中则按照相应的算法进行cache的替换或者装填，之后返回给CPU数据

四、MIPS虚存映射布局
mmu.h
/*
 o     4G ----------->  +----------------------------+------------0x100000000
 o                      |       ...                 	    |  kseg3
 o                      +----------------------------+------------0xe000 0000
 o                      |       ...                 	    |  kseg2
 o                      +----------------------------+------------0xc000 0000
 o                      |   Interrupts & Exception     |  kseg1
 o                      +----------------------------+------------0xa000 0000
 o                      |      Invalid memory            |     /|\
 o                      +----------------------------+----|-------Physics Memory Max
 o                      |       ...                 	    |  kseg0
 o  VPT,KSTACKTOP-----> +-----------------+----|-------0x8040 0000-------end
 o                      |       Kernel Stack                |      | KSTKSIZE                 /|\
 o                      +----------------------------+----|------                         |
 o                      |       Kernel Text                  |      |                            PDMAP
 o      KERNBASE -----> +--------------------+----|-------0x8001 0000    |
 o                      	|   Interrupts & Exception |   \|/                            \|/
 o      ULIM     -----> +----------------------------+------------0x8000 0000-------
 o                      |         User VPT           |     PDMAP                /|\
 o      UVPT     -----> +----------------------------+------------0x7fc0 0000    |
 o                      |         PAGES              |     PDMAP                 |
 o      UPAGES   -----> +----------------------------+------------0x7f80 0000    |
 o                      |         ENVS               |     PDMAP                 |
 o  UTOP,UENVS   -----> +----------------------------+------------0x7f40 0000    |
 o  UXSTACKTOP -/       |     user exception stack   |     BY2PG                 |
 o                      +----------------------------+------------0x7f3f f000    |
 o                      |       Invalid memory       |     BY2PG                 |
 o      USTACKTOP ----> +----------------------------+------------0x7f3f e000    |
 o                      |     normal user stack      |     BY2PG                 |
 o                      +----------------------------+------------0x7f3f d000    |
 a                      |                            |                           |
 a                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                           |
 a                      .                            .                           |
 a                      .                            .                         kuseg
 a                      .                            .                           |
 a                      |~~~~~~~~~~~~~~~~~~~~~~~~~~~~|                           |
 a                      |                            |                           |
 o       UTEXT   -----> +----------------------------+                           |
 o                      |                            |     2 * PDMAP            \|/
 a     0 ------------>  +----------------------------+ -----------------------------
 o
*/

	1.kuseg(TLB-mapped cacheable user space,0x00000000-0x7fffffff):
		用户模式下可用的地址，大小为2G，用户内存空间
		需要通过MMU
	2.kseg0(direct-mapped cached kernel space,0x80000000-0x9fffffff)
		内核地址，
		不需要通过MMU，只需将地址的最高位清零(&0x7fffffff)，就被转换位物理地址
		被连续映射到物理内存的低端512M空间
		需要用高速缓存(cached)
		在有MMU的系统，操作系统内核会存放在这个区域
	3.kseg1(direct-mapper uncached kernel space,0xa0000000-0xbfffffff)
		内核地址
		将虚拟地址的高3位清零(&0x1fffffff)，就可以转换到物理地址
		这段逻辑地址也被连续地映射到物理内存地低端512M空间
		但不使用缓存(uncached)，访问速度比较慢
		通常被映射到I/O寄存器，用来实现对外设的访问
	4.kseg2(TLB-mapped cacheable kernel space,0xc0000000-0xffffffff)
		只能在内核态下使用，并需要MMU的转换
五、内存管理与内存翻译
	1.隐藏于保护
	2.为程序分配连续的内存空间
	3.扩展地址空间范围，MIPS32位机拥有了4GB的寻址能力
	4.使内存映射适合你的程序
	5.重定位
六、初始化流程
	init/main.c中调用定义在init/init.c中的mips_init()函数
	1.mips_detect_memory();
	2.mips_vm_init();
	3.page_init();
七、内存控制块
	MIPScpu中，地址转换以4KB大小为单位，称为页。
	整个物理内存按4KB大小分成了许多页。
	使用Page结构体来记录一页内存的相关信息:
	typedef LIST_ENTRY(Page) Page_LIST_entry_t;

	struct Page{
	      Page_LIST_entry_t pp_link; /*free list link */
                      u_short pp_ref;
	};
                |pp_ref|用来记录这一物理页面的引用次数
	|pp_link|当前节点指向链表中下一个节点的指针，类型为|LIST_ENTRY(Page)|
                阅读include/queue.h

PADDR:translates from kernel virtual address to physical address
KADDR:translates from physical address to kernel virtual address

八、内存分配和释放
	bzero ―― 虚拟地址

九、两级页表机制
	虚存管理
	二级页表结构
	第一级表――页目录(page directory) 共1024个页目录
				      每个页目录项32位(4Byte)，
				      存储的值为其对应的二级页表入口的物理地址
		   整个页目录存放在一个页面(4KB)中，mips_vm_init为其分配了相应的物理内存
	第二级表――页表(page table) 每一张页表有1024个页表项
			             每个页表项32位(4 Byte)
			             页表项存储的是对应页面的页框号(20位）以及标志位(12位）
			             每张页表占用一个页面大小(4KB)的内存空间
	对于一个32位的虚存地址，其31-22位表示的是页目录项的索引
			          21-12位表示的是页表项的索引
			          11-0位白哦是的是该地址在该页面内的偏移

十、地址转换
	通过二级页表进行虚拟地址到物理地址的转换
	1.通过PDX(va)获得一个虚拟地址对应的页目录索引
	2.凭借索引在页目录中得到对应的二级页表的基址(物理地址)
	3.通过(KADDR)将物理地址转化为内核虚拟地址
	4.通过PTX(va)获得这个虚存地址对应的页表索引
	5.从页表中得到对应的页面的物理地址

十一、页目录自映射
	进程的页表空间
	/**
	 *      ULIM     -----> +----------------------------+------------0x8000 0000-------
 	 *                      |         User VPT           |     PDMAP                /|\
 	 *      UVPT     -----> +----------------------------+------------0x7fc0 0000    |
 	 */
	1024个页表中，有一个页表所对应的4M空间正是这1024个页表所占用的4M内存
	这个页表的1024个页表项存储了1024个物理地址，分别是1024个页表的物理地址
	在二级页表结构中，页目录对应着二级页表，1024个页目录项存储了全部1024个页表的物理地址
	――一个页表的内容和页目录的内容是完全一样的
	其中一个页表和页目录完全重合了
	4M空间的起始位置――第一个二级页表对应着页目录的第一个页目录项
	1M个页表项和4G地址空间是线性映射
	0x7fc00000这一地址对应的是第(0x7fc00000>>12)个页表项，也就是第一个页目录项
	一个页表项32位，占用4个字节的内存
	其相对于页表起始地址0x7fc00000的偏移为(0x7fc00000>>12)*4 = 0x1ff000
	于是得到0x7fc00000+0x1ff000 = 0x7fdff000
	页目录的虚存地址为0x7fdff000
十二、创建页表
	mm/pmap.c boot_pgdir_walk 
		    pgdir_walk
	
	PDX
	PTE_ADDR
	PTE_V
	PADDR(pgtable) | PTE_V
	PTX
十三、地址映射
	mm/pmap.c   boot_map_segment 将指定的物理内存与虚拟内存建立起映射

*******
mips_vm_init中调用boot_map_segment,建立物理地址与虚拟地址映射
boot_map_segment(pgdir, UPAGES, n, PADDR(pages), PTE_R);
其中 
pgdir为上面pgdir = alloc(BY2PG, BY2PG, 1);为其分配的地址，80401000，
	为内核地址？为什么是内核地址，页目录地址不应该在页表地址范围中吗？
UPAGES 为mmu.h中定义的页表地址，为0x7f80 0000，为什么不是0x7fc0 0000？
n为 npage*sizeof（struct Page） ？这又是个啥？
PADDR（pages） 是页对应的物理地址，pages同样是内核地址，由(struct Page *)alloc(npage * sizeof(struct Page), BY2PG, 1)给出
PTE_R是标志位，或一下就好了




