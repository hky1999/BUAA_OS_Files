(1) ls
     用法:ls [选项]... [文件]...
    选项（常用）：
        -a      不隐藏任何以"."开始的项目
        -l      每行只列出一个文件
(2) tree
        -a 列出全部文件
        -d 只列出目录
(3) mkdir 创建文件目录
(4) rmdir  删除空目录
(5) rm
     用法:rm [选项]... 文件...
     选项（常用）：
        -r      递归删除目录及其内容
        -f      强制删除。忽略不存在的文件，不提示确认
        -i      使用文件扩展名字符删除多个文件，系统要求你逐一确定是否要删除，输入y并按Enter键删
        -rf/   强制递归删除全盘文件
(6) cd  切换工作目录
          . 当前目录
          .. 当前目录位置的上一层目录
(7) echo 在Shell中打印Shell变量的值，或者直接输出指定的字符串
(8) cat 查看文件内容
        -n 显示行数
(9) cp  复制
        -r      递归复制目录及其子目录内的所有内容
(10) mv     mv file ../file_mv就是将当前目录中的file文件移动至上一层目录中且重命名为file_mv
                对文件进行重命名操作，使用mv oldname newname命令
(11) source 
        source命令是bash的内置命令，该命令通常用点命令 . 来替代
        这两个命令都以一个脚本为参数，该脚本将在当前Shell的环境执行
(12) find 
        使用find命令并加上-name选项可以在当前目录下递归地查找符合参数所示文件名的文件，并将文件的路径输出至屏幕上
        find <dir> -name <file> 输出路径
(13) grep  ####确定范围与选项
        能使用正则表达式搜索文本，并把匹配的行打印出来
        在整个项目目录中查找某个函数名、变量名等特定文本
        选项（常用）：
        -a      不忽略二进制数据进行搜索
        -i      忽略文件大小写差异
        -r      从文件夹递归查找
        -n      显示行号
(14) man - manual 帮助命令
(15)  Ctrl+C 终止当前程序的执行
        Ctrl+Z 挂起当前程序   挂起程序后会显示该程序挂起编号，若想要恢复该程序可以使用 fg [job_spec] 即可，job_spec即为挂起编号，不输入时默认为最近挂起进程
        Ctrl+D 终止输入（若正在使用Shell，则退出当前Shell）
        Ctrl+I 清屏
(16) locate find 是去硬盘找，locate 只在/var/lib/slocate资料库中找。locate的速度比find快，它并不是真的查找文件，而是查数据库，所以locate的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护，也可以手工升级数据库。
(17) chmod-------chmod 权限设定字串 文件...
    u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群组，o 表示其他以外的人，a 表示这三者皆是。
    + 表示增加权限、- 表示取消权限、= 表示唯一设定权限。
    r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。
    此外chmod也可以用数字来表示权限，格式为：
        chmod abc 文件
    abc为三个数字，分别表示拥有者，群组，其他人的权限。r=4，w=2，x=1，用这些数字的加和来表示权限。例如
     chmod 777 file和chmod a=rwx file效果相同。      
(18) diff 用于比较文件的差异
        -b 不检查空格字符的不同
        -B 不检查空行
        -q 仅显示有无差异，不显示详细信息
(19) sed        文件处理工具，可以将数据行进行替换、删除、新增、选取等特定工作
    选项(常用):
        -n:使用安静模式。在一般sed的用法中，输入文本的所有内容都会被输出。加上-n参数后，则只有经过sed 处理的内容才会被显示。
        -e: 进行多项编辑，即对输入行应用多条sed命令时使用。
        -i:直接修改读取的档案内容，而不是输出到屏幕。使用时应小心。       
    命令(常用)：
        a :新增，a后紧接着\，在当前行的后面添加一行文本
        c :取代，c后紧接着\，用新的文本取代本行的文本
        i :插入，i后紧接着\，在当前行的上面插入一行文本
        d :删除，删除当前行的内容
        p :显示，把选择的内容输出。通常 p 会与参数 sed -n 一起使用。
        s :取代，格式为s/re/string，re表示正则表达式，string为字符串，功能为将正则表达式替换为字符串。
(20) awk 一种处理文本文件的语言，是一个强大的文本分析工具
       awk 'pattern action' file
       awk '$1>2 {print $1,$3}' my.txt 文件my.txt中所有第一项大于2的行，输出第一项和第三项。
       awk -F, '{print $2}'  my.txt  -F选项用来指定用于分隔的字符,默认为空格，这个例子中为‘，’
(21) tmux 终端复用软件可在一个终端窗口中运行多个终端会话
       Ctrl+B 进入控制台
      窗格操作：
       Ctrl+B  %垂直分屏
                  “水平分屏
                   O切换到下一个窗格
                   X关闭当前窗格
                   Y确认
      窗口操作：
      Ctrl+B  C 创建一个新的窗口，覆盖当前的窗口
                  P 回到上一个窗口
                  N 去往下一个窗口
                  end？ （取地址符）关闭当前窗口
    会话操作：
                 关闭会话-销毁会话
                 tmux ls 查看当前已有会话
                 Ctrl+B D                                 退出而不是销毁会话
                 tmux a -t +会话名                   打开已有的会话
                 tmux kill-session -t +会话名     销毁已存在的会话
(22) Tab自动补全
(22) shell 脚本

	#!/bin/bash    保证我们的脚本默认会使用bash
	#+注释
	命令……

	添加运行权限 chmod +x filename.sh
	运行文件
		bash filenam.sh
		source filename.sh
		./filename.sh
(23)重定向和管道
shell使用三种流：
    标准输入：stdin ， 由0表示
    标准输出：stdout，由1表示
    标准错误：stderr， 由2表示
2>>可以将标准错误重定向。三种流可以同时重定向，举例:  command < input.txt 1>output.txt 2>err.txt
管道符号“|”可以连接命令：  command1 | command2 | command3 | ...
cat my.sh | grep "Hello" 上述命令的功能为将my.sh的内容输出给grep指令，grep在其中查找字符串
(24) shell传递参数与函数
	$n就代表第几个参数，而$0也就是命令
	$# 传递的参数个数
	$* 一个字符串显示传递的全部参数
(25) shell流程控制 ####流程控制的内容不可为空。运算符和变量之间要有空格
       if的格式：
	if condition
  	then
        	    command1 
         	    command2
        	    ...
    	fi
	或者写到一行
	 if condition; then command1; command2; ... fi	
    	-xx关系运算符
    	    -eq  ==(equal)
     	   -ne  !=(not equal)
     	   -gt  >(greater than)
     	   -lt  <(less than)
     	   -ge  >=(greater or equal)
     	   -le  <=(less or equal)	
   	 条件也可以写true或false
       while语句格式：
	while condition
                do
       	    commands
  	done
       while语句可以使用continue和break这两个循环控制语句	
(26) gxemul
		 (-E 仿真机器的类型
  	  	-C 仿真cpu的类型
  	 	 -M 仿真的内存大小
  	  	-V 进入调试模式)
   	  breakpoint add addr添加断点  (地址，C，汇编）
  	  continue 继续执行
  	  step [n] 向后执行n条汇编指令 （可用s代替）
  	  lookup name|addr 通过名字或地址查找标识符
  	  dump [addr [endaddr]] 查询指定地址的内容
  	  reg [cpuid][,c] 查看寄存器内容，添加”,c”可以查看协处理器
   	  help 显示各个指令的作用与用法
   	  quit 退出
                  Ctrl+C 中断
添加断点以及lookup查找时，只能用内核的函数名；用户态的代码只能在系统调用中中断。
(27) GCC
	gcc testfun.c test.c -o test
	gcc -c testfun.c -> gcc -c test.c ->gcc testfun.o test.o -o test
        -o      指定生成的输出文件
        -S      将C代码转换为汇编代码
        -wall   显示警告信息
        -c      仅执行编译操作，不进行链接操作
        -M      列出依赖
        -I       加入Include文件夹
                gcc test.c 默认生成名为a.out的可执行文件
	gcc test.c -o test 使用-o选项生成名为test的可执行文件
(28) 进程与fork
	进程(Process)是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。是操作系统结构的基础。狭义的说。进程就是正在运行程序的实例，是程序的一次执行。
        Fork：在操作系统中，某个进程调用fork()之后，将会以此为分叉分成两个进程运行。
        Fork()函数执行后，进程一分为二，出现了父子进程，父子进程会将fork()函数后的代码均执行一遍，唯一的区别是，在子进程中，fork()函数的返回值为0，在父进程中fork()函数的返回值为父进程的进程编号。
 1 进程
 2 代码运行需要资源：存储资源，计算资源……
 3 OS分配资源：资源分配到进程
 4 OS是校长，各类资源就是授课老师、桌椅板凳，代码就是学生，进程就是班级
 5 OS只有一个，但是进程可以有很多个，fork，进程号不同。
 //pid_t 进程号类型，宏定义的unsigned int
fork创建失败，返回负数，子进程返回0，父进程返回进程编号（与fork函数执行前进程编号相同）
fork仅创建出一个子进程，父进程与原进程相同，执行顺序由操作系统进程调度策略决定。
(29) Makefile
make命令工具，触发makefile中指令
Makefile描述工程所有文件编译顺序 逐级管理
变量定义方式  drivers_dir := drivers
引用 $(drivers_dir)
modules 可理解为数组 (:=
.PHONY 伪目标定义
	声明伪目标，保证对clean进行make操作时不产生冲突，是对clean规则的操作。
规则:依赖信息
$(MAKE)   --directory=$@ 相当于make冒号右侧所有信息
规则后跟指令需加Tab
$$d对变量d的引用（使用两个$号，因为d为shell中定义变量）
include 对文件的引用






