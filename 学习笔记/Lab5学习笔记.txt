一、文件系统概述
	1.磁盘文件系统
	2.用户空间文件系统
	3.文件系统的设计与实现
		（1）外部存储设备驱动 IDE
		（2）文件系统结构
		（3）文件系统的用户接口
二、IDE磁盘驱动
	driver目录/串口通信驱动程序――内存映射I/O(MMIO)
	完全运行在用户空间中
	1.内存映射I/O
		外设寄存器――I/O端口
		X86下
		  将外设I/O内存资源的物理地址映射到内核虚地址空间
		  然后才能根据映射所得到的核心虚地址范围
		  通过访存指令访问这些I/O内存资源
		MIPS统一使用内存映射I/O的模型
		对kseg1段地址的读写是未缓存(uncached)的
		编写设备驱动的时候需要将物理地址转换为kseg1段的内核虚拟地址（+0xA0000000）
		
		编写IDE磁盘的驱动完全位于用户空间，用户态进程若是直接读写内核虚拟地址将会由处理器引发一个地址错误(ADEL/S)
		对于设备的读写必须通过系统调用来实现
		sys_write_dev
		sys_read_dev
		接受用户虚拟地址，设备的物理地址和读写的长度（按字节计数）作为参数
		在内核空间中完成I/O操作
	2.IDE磁盘
	          磁盘的物理结构
		1.扇区(Sector)――磁盘读写操作的基本单位 512字节
		2.磁道(track) 盘片上以盘片中心为圆心，不同半径的同心圆
		3.柱面(cylinder) 不同盘面相同半径的磁道所组成的圆柱
		4.磁头(head)
 
	          IDE磁盘操作
		Simulated IDE disk地址：0x13000000
三、驱动程序编写
	所有的地址操作都需要将物理地址转换成内核虚拟地址
	设备基地址对应的kseg1的内核虚拟地址是0xB3000000
	用户态磁盘驱动使用系统调用代替直接对物理地址的读写，完成寄存器配置和数据拷贝等功能
四、文件系统结构
	inode区域：保存文件的状态属性，以及指向数据块的指针
	data区域：存放文件的内容和目录的元信息（包含的文件）
	1.磁盘空间系统布局
		最开始的一个扇区(512字节)：启动扇区和分区表
		接下来的一个扇区(超级块)：描述文件系统的基本信息(Magic Number)、磁盘大小，以及根目录的位置
	 文件系统中，使用位图(Bitmap)法来管理空闲的磁盘资源――使用一个二进制位来表示磁盘上的一个块(Block)是否使用
	2.文件系统详细结构
		文件名的最大长度为MAXNAMELEN(128)
		每个文件块设置有10个直接指针，用来记录文件的数据块在磁盘上的位置
		每个磁盘块的大小为4KB――10个直接指针能表示最大40KB的文件
		间接指针――f_indirect
		
		普通文件：磁盘块存储着文件内容
		目录文件：指向的磁盘块存储着该目录下各个文件对应的文件控制块
		查找文件――首先从超级块中读取根目录的文件控制块
			    沿着目标路径，挨个查看当前目录的文件的子文件是否与下一级目标文件同名
			    如此便能查找到最终的目标文件
		fs/fsformat.c 模拟对磁盘的操作：文件系统结构的具体细节在此
		通过fsformat程序创建一个磁盘文件 fs/fs.img供内核使用
	3.块缓存
	借助虚拟内存来实现磁盘块缓存的设计
	文件系统服务是一个用户进程，拥有4G的虚拟内存空间
	将DISKMAP到DISKMAP+DISKMAX这一段虚拟地址空间(0x10000000-0xcfffffff)作为缓冲区(diskaddr)
	当磁盘读入内存时，用来映射相关的页
	当将一个磁盘块(block)中的内容载入到内存中时，我们需要为之分配对应的物理内存(map_block)；
	当结束使用这一磁盘块时，需要释放对应的物理内存以回收操作系统资源(unmap_block)。
	读磁盘块：read_block
	写磁盘块：write_block
	read_block将指定编号的磁盘块都写入到内存中：
		首先检查这块磁盘块是否已经在内存中，如果不在，先分配一页物理内存，
		然后调用ide_read函数来读取磁盘上的数据到对应的存地址处
		在完成块缓存系统之后我们就可以实现从操作系统的文件系统操作函数
五、文件系统的用户接口
	文件系统属于用户态进程，以服务的形式供其他进程调用。
	文件描述符(file descriptor)：用户程序管理、操作文件资源的方式
	1.文件描述符
		当用户进程试图打开一个文件时，需要一个文件描述符来存储文件的基本信息和用户进程中关于文件的状态
		文件描述符也起到描述用户对于文件操作的作用
		当用户进程向文件系统发送打开文件的请求时
		文件系统进程会将这些基本信息记录在内存中
		由操作系统将用户进程请求的地址映射到同一个物理页上
		因此一个文件描述符至少需要独占一页的空间
		当用户进程获取了文件大小等基本信息后，再次向文件系统发送请求将文件内容映射到指定内存空间中
		
		需要一个指针帮助我们在文件中定位，类似C的fseek()
	2.文件系统服务
		文件系统服务通过IPC的形式供其他进程调用，进行文件读写操作
		在内核开始运行时，就启动了文件系统服务进程ENV_CREATE(fs_serv),
		用户进程需要进行文件操作时，使用ipc_send/ipc_recv与fs_serv进行交互，完成操作
		
		文件系统服务进程的初始化函数中，
		首先调用了serv_init函数准备好全局的文件打开记录表opentab
		然后调用fs_init函数来初始化文件系统

		fs_init函数首先通过读取超级块的内容获知磁盘的基本信息
		然后检查磁盘是否能够正常读写
		最后调用read_bitmap函数检查磁盘块上的位图是否正确
		
		执行完文件系统的初始化后
		serve函数被调用，文件系统服务开始运行，等待其他程序的请求(fs/serv.c)

		用户程序在发出文件系统操作请求时，将请求的内容放在对应的结构体中进行消息的传递
		fs_serv进程收到其他进程的IPC请求(user/fsipc.c)后，IPC传递的消息包含了请求的类型和其他必要的参数
		根据请求的类型执行相应的对文件系统的操作(文件的增、删、改、查等)(user/file.c)
		将结果重新通过IPC反馈给用户程序

		
		
		
		
				
		
	